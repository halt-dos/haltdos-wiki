"use strict";(self.webpackChunkhaltdos_wiki=self.webpackChunkhaltdos_wiki||[]).push([[61858],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),d=a,g=u["".concat(l,".").concat(d)]||u[d]||h[d]||o;return n?r.createElement(g,i(i({ref:t},p),{},{components:n})):r.createElement(g,i({ref:t},p))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},53628:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>p});n(67294);var r=n(3905);function a(){return a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a.apply(this,arguments)}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}const i={sidebar_position:3},s="Load Balancing",l={unversionedId:"professional/waf/server_group/loadbalancing",id:"version-7.0/professional/waf/server_group/loadbalancing",title:"Load Balancing",description:"Load Balancing mechanism used for WAF",source:"@site/versioned_docs/version-7.0/professional/waf/server_group/loadbalancing.md",sourceDirName:"professional/waf/server_group",slug:"/professional/waf/server_group/loadbalancing",permalink:"/v7/professional/waf/server_group/loadbalancing",draft:!1,tags:[],version:"7.0",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"professional_sidebar",previous:{title:"Servers",permalink:"/v7/professional/waf/server_group/servers"},next:{title:"Monitors",permalink:"/v7/professional/waf/monitors"}},c={},p=[{value:"Overview",id:"overview",level:2},{value:"Load Balancing Algorithms",id:"load-balancing-algorithms",level:4},{value:"How to Use:",id:"how-to-use",level:3},{value:"Description",id:"description",level:4},{value:"<strong>Upstream Retries</strong>",id:"upstream-retries",level:5},{value:"<strong>Fail-over Threshold</strong>",id:"fail-over-threshold",level:5},{value:"<strong>Client IP Pool</strong>",id:"client-ip-pool",level:5},{value:"<strong>Algorithm</strong>",id:"algorithm",level:5},{value:"<strong>Sticky Session Cookie</strong>",id:"sticky-session-cookie",level:5},{value:"Location",id:"location",level:4},{value:"<strong>Priority</strong>",id:"priority",level:5},{value:"<strong>Location</strong>",id:"location-1",level:5},{value:"<strong>Value</strong>",id:"value",level:5}],u={toc:p},h="wrapper";function d(e){var{components:t}=e,i=o(e,["components"]);return(0,r.kt)(h,a({},u,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",a({},{id:"load-balancing"}),"Load Balancing"),(0,r.kt)("p",null,"Load Balancing mechanism used for WAF"),(0,r.kt)("hr",null),(0,r.kt)("h2",a({},{id:"overview"}),"Overview"),(0,r.kt)("p",null,"Load balancing across multiple application instances is a commonly used technique for optimizing resource utilization, maximizing throughput, reducing latency, and ensuring fault-tolerant configurations."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"loadbalancing",src:n(51489).Z,width:"1888",height:"990"}),"\n",(0,r.kt)("img",{alt:"loadbalancing",src:n(95576).Z,width:"1888",height:"990"})),(0,r.kt)("h4",a({},{id:"load-balancing-algorithms"}),"Load Balancing Algorithms"),(0,r.kt)("p",null,"This field specifies the load balancing algorithm according to the configured website."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Round Robin"),":\nThis algorithm is a smart approach to distribute client requests across an array of servers. It forwards the client request to each server in turn. Also, assigns a weight to each server as per current load and idle capacity.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Least Connection"),": This algorithm is a dynamic load balancing algorithm. It forwards client requests to the server, which has the least no. of active connections on the server.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Least Listener Connection"),":\nThis algorithm is a dynamic load balancing algorithm. It forwards client requests to the server, which have a small response time in order to serve requests.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Least Response Time"),": This algorithm is a dynamic load balancing algorithm. It forwards client requests to the server, which have a small response time in order to serve requests.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Minium Jitter"),": This algorithm is a dynamic load balancing algorithm. It forwards client requests to the server, which have served the minimum jitter. NOTE: For this algorithm to work, the server group should have ICMP monitor attached.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"IP Hash"),": This algorithm takes the client's and server's source and destination IP address to generate a unique hash key. This key is used to assign the client to a specific server. In the case of a broken session, the key can be regenerated, and the client can be directed to the same server. ")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Persistent Hash"),": This algorithm takes the user input location within the current request to generate a user-defined custom unique hash key. This key is used to assign the client to a specific server. In the case of a broken session, the key can be regenerated, and the client can be directed to the same server. NOTE: In hashing-based load balancing,  if a specified value does not exists then the request is served on the basis of client's IP address.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Least Requests:"),"\nThis algorithm is a dynamic load balancing algorithm. It forwards client requests to the server, which have served the minimum amount of requests.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"SNMP Metrics"),": This algorithm is a dynamic load balancing algorithm. It forwards client requests to the server, which have least CPU / RAM usage. NOTE: For this algorithm to work, the server group should have SNMP monitor attached.    "))),(0,r.kt)("h3",a({},{id:"how-to-use"}),"How to Use:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Log into the Haltdos WAF Professional edition web UI console."),(0,r.kt)("li",{parentName:"ol"},"Then go to ",(0,r.kt)("strong",{parentName:"li"},"Listeners")," > ",(0,r.kt)("strong",{parentName:"li"},"Server Groups")," > ",(0,r.kt)("strong",{parentName:"li"},"Load Balancing")),(0,r.kt)("li",{parentName:"ol"},"Set the configurations and ",(0,r.kt)("strong",{parentName:"li"},"Save Changes"),".")),(0,r.kt)("h4",a({},{id:"description"}),"Description"),(0,r.kt)("h5",a({},{id:"upstream-retries"}),(0,r.kt)("strong",{parentName:"h5"},"Upstream Retries")),(0,r.kt)("p",null,"This option used to specify the upstream retries. By default, the value is set to 1."),(0,r.kt)("pre",null,(0,r.kt)("code",a({parentName:"pre"},{}),"Accepted values: Integer\n\nDefault: 1  \n")),(0,r.kt)("h5",a({},{id:"fail-over-threshold"}),(0,r.kt)("strong",{parentName:"h5"},"Fail-over Threshold")),(0,r.kt)("p",null,"This option specify the fail-over threshold in percentage of (active/total) primary servers for switching to backup servers. By default, the value is set to 50%."),(0,r.kt)("pre",null,(0,r.kt)("code",a({parentName:"pre"},{}),"Accepted values: Integer\n\nMax: 100\n\nMin: 1\n\nDefault: 50  \n")),(0,r.kt)("h5",a({},{id:"client-ip-pool"}),(0,r.kt)("strong",{parentName:"h5"},"Client IP Pool")),(0,r.kt)("p",null,"Specify list of client IP to use when connecting to upstream. Leave blank for auto"),(0,r.kt)("pre",null,(0,r.kt)("code",a({parentName:"pre"},{}),"Accepted values: list of client IP\n\nDefault: Blank  \n")),(0,r.kt)("h5",a({},{id:"algorithm"}),(0,r.kt)("strong",{parentName:"h5"},"Algorithm")),(0,r.kt)("p",null,"This option is used to specify the algorithm used by the server group. By default, the value is selected as Round Robin."),(0,r.kt)("pre",null,(0,r.kt)("code",a({parentName:"pre"},{}),"Accepted values: Round Robin / Least Connection / Least Listener Connection / Least Response Time / Minium Jitter / IP Hash / Persistent Hash / Least Requests / SNMP Metrics \n\nDefault: Round Robin  \n")),(0,r.kt)("h5",a({},{id:"sticky-session-cookie"}),(0,r.kt)("strong",{parentName:"h5"},"Sticky Session Cookie")),(0,r.kt)("p",null,"Specify enabling sticky session based on specified cookie"),(0,r.kt)("pre",null,(0,r.kt)("code",a({parentName:"pre"},{}),"Accepted values: String\n\nDefault: Blank \n")),(0,r.kt)("h4",a({},{id:"location"}),"Location"),(0,r.kt)("h5",a({},{id:"priority"}),(0,r.kt)("strong",{parentName:"h5"},"Priority")),(0,r.kt)("p",null,"Set the priority"),(0,r.kt)("pre",null,(0,r.kt)("code",a({parentName:"pre"},{}),"Accepted values: Integer\n\nDefault: Blank \n")),(0,r.kt)("h5",a({},{id:"location-1"}),(0,r.kt)("strong",{parentName:"h5"},"Location")),(0,r.kt)("p",null,"Set the location"),(0,r.kt)("pre",null,(0,r.kt)("code",a({parentName:"pre"},{}),"Accepted values: SRC_IP / DST_IP / SRC_PORT / DST_PORT / URL / ARG_VAL / HEADER_VAL / COOKIE_VAL\n\nDefault: SRC_IP \n")),(0,r.kt)("h5",a({},{id:"value"}),(0,r.kt)("strong",{parentName:"h5"},"Value")),(0,r.kt)("p",null,"Set the location"),(0,r.kt)("pre",null,(0,r.kt)("code",a({parentName:"pre"},{}),"Accepted values: String\n\nDefault: Blank\n")))}d.isMDXComponent=!0},51489:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/load_balancing1-2d0b2a06911b8205a592b4e6320a7479.png"},95576:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/load_balancing2-8f182e400659b93c9b1d5056462e42ff.png"}}]);